name: 'Provision Azure VM'
description: 'Provision an Azure VM for benchmarking'

inputs:
  vm-name:
    description: 'Name of the VM to create'
    required: true
  vm-size:
    description: 'Azure VM SKU size'
    required: true
    default: 'Standard_D4s_v3'
  resource-group:
    description: 'Azure resource group name'
    required: true
  location:
    description: 'Azure location'
    required: false
    default: 'eastus2'
  accelerated-networking:
    description: 'Enable accelerated networking'
    required: false
    default: 'true'

outputs:
  vm-ip:
    description: 'Public IP address of the created VM'
    value: ${{ steps.create-vm.outputs.vm-ip }}
  vm-private-ip:
    description: 'Private IP address of the created VM'
    value: ${{ steps.create-vm.outputs.vm-private-ip }}

runs:
  using: 'composite'
  steps:
    - name: Create VM
      id: create-vm
      shell: bash
      run: |
        # Create VM with proper image and settings
        az vm create \
          --resource-group ${{ inputs.resource-group }} \
          --name ${{ inputs.vm-name }} \
          --image Ubuntu2204 \
          --size ${{ inputs.vm-size }} \
          --admin-username azureuser \
          --generate-ssh-keys \
          --public-ip-address-allocation static \
          --accelerated-networking ${{ inputs.accelerated-networking }} \
          --storage-sku Premium_LRS \
          --os-disk-size-gb 128 \
          --location ${{ inputs.location }}
        
        # Get IP addresses
        VM_PUBLIC_IP=$(az vm show -d -g ${{ inputs.resource-group }} -n ${{ inputs.vm-name }} --query publicIps -o tsv)
        VM_PRIVATE_IP=$(az vm show -d -g ${{ inputs.resource-group }} -n ${{ inputs.vm-name }} --query privateIps -o tsv)
        
        echo "vm-ip=${VM_PUBLIC_IP}" >> $GITHUB_OUTPUT
        echo "vm-private-ip=${VM_PRIVATE_IP}" >> $GITHUB_OUTPUT
        
        echo "âœ… VM created: ${{ inputs.vm-name }}"
        echo "   Public IP: ${VM_PUBLIC_IP}"
        echo "   Private IP: ${VM_PRIVATE_IP}"
    
    - name: Apply VM Optimizations
      shell: bash
      run: |
        # Wait for VM to be ready
        sleep 30
        
        # Run optimization script on VM
        az vm run-command invoke \
          --resource-group ${{ inputs.resource-group }} \
          --name ${{ inputs.vm-name }} \
          --command-id RunShellScript \
          --scripts "
            # System optimizations
            sudo sysctl -w fs.file-max=2097152
            sudo sysctl -w net.core.somaxconn=65535
            sudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535
            sudo sysctl -w net.ipv4.tcp_tw_reuse=1
            
            # Install required packages
            sudo apt-get update
            sudo apt-get install -y python3-pip git
            
            # Set up Docker
            curl -fsSL https://get.docker.com | sudo sh
            sudo usermod -aG docker azureuser
            
            echo 'VM optimization complete'
          "