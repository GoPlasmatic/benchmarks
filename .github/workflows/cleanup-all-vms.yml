name: Cleanup All Benchmark VMs

on:
  workflow_dispatch:
    inputs:
      confirm_delete:
        description: 'Type "DELETE" to confirm deletion of all VMs'
        required: true
        default: ''
      resource_group:
        description: 'Resource group to clean'
        required: false
        default: 'rg-benchmarks'

jobs:
  cleanup-all:
    name: Delete All VMs
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_delete }}" != "DELETE" ]; then
            echo "❌ Confirmation not provided. Type 'DELETE' to confirm."
            exit 1
          fi
          echo "✅ Confirmation received. Proceeding with deletion..."
      
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: List All VMs Before Cleanup
        run: |
          echo "## VMs to be deleted from ${{ github.event.inputs.resource_group }}"
          echo ""
          
          # List all VMs with details
          az vm list -g ${{ github.event.inputs.resource_group }} \
            --query "[].{Name:name, Size:hardwareProfile.vmSize, State:powerState, Created:timeCreated}" \
            -o table | tee vm_list.txt
          
          # Count VMs
          VM_COUNT=$(az vm list -g ${{ github.event.inputs.resource_group }} --query "length([])" -o tsv)
          echo ""
          echo "Total VMs to delete: $VM_COUNT"
          
          # Calculate cores being used
          TOTAL_CORES=0
          for vm in $(az vm list -g ${{ github.event.inputs.resource_group }} --query "[].hardwareProfile.vmSize" -o tsv); do
            case $vm in
              *B2s*) CORES=2 ;;
              *D4s*) CORES=4 ;;
              *D8s*) CORES=8 ;;
              *) CORES=2 ;;
            esac
            TOTAL_CORES=$((TOTAL_CORES + CORES))
          done
          echo "Total cores to be freed: $TOTAL_CORES"
      
      - name: Delete All VMs
        run: |
          echo "Starting deletion of all VMs..."
          
          # Get all VM names
          VMS=$(az vm list -g ${{ github.event.inputs.resource_group }} --query "[].name" -o tsv)
          
          if [ -z "$VMS" ]; then
            echo "No VMs found in resource group"
            exit 0
          fi
          
          # Delete each VM (force delete, don't wait)
          for VM_NAME in $VMS; do
            echo "Deleting VM: $VM_NAME"
            az vm delete \
              --resource-group ${{ github.event.inputs.resource_group }} \
              --name "$VM_NAME" \
              --yes \
              --force-deletion \
              --no-wait &
          done
          
          # Wait for all background deletions to start
          wait
          
          echo "All VM deletions initiated"
      
      - name: Wait for Deletions
        run: |
          echo "Waiting for VMs to be deleted..."
          
          # Wait up to 5 minutes for VMs to be deleted
          for i in {1..30}; do
            REMAINING=$(az vm list -g ${{ github.event.inputs.resource_group }} --query "length([])" -o tsv)
            
            if [ "$REMAINING" -eq "0" ]; then
              echo "✅ All VMs deleted successfully"
              break
            fi
            
            echo "Waiting... ($REMAINING VMs remaining)"
            sleep 10
          done
      
      - name: Clean Orphaned Resources
        run: |
          echo "Cleaning up orphaned resources..."
          
          # Delete orphaned disks
          echo "Deleting orphaned disks..."
          DISKS=$(az disk list -g ${{ github.event.inputs.resource_group }} --query "[?managedBy==null].name" -o tsv)
          for DISK in $DISKS; do
            echo "  Deleting disk: $DISK"
            az disk delete -g ${{ github.event.inputs.resource_group }} -n "$DISK" --yes --no-wait
          done
          
          # Delete orphaned NICs
          echo "Deleting orphaned network interfaces..."
          NICS=$(az network nic list -g ${{ github.event.inputs.resource_group }} --query "[?virtualMachine==null].name" -o tsv)
          for NIC in $NICS; do
            echo "  Deleting NIC: $NIC"
            az network nic delete -g ${{ github.event.inputs.resource_group }} -n "$NIC" --no-wait
          done
          
          # Delete orphaned public IPs
          echo "Deleting orphaned public IPs..."
          IPS=$(az network public-ip list -g ${{ github.event.inputs.resource_group }} --query "[?ipConfiguration==null].name" -o tsv)
          for IP in $IPS; do
            echo "  Deleting public IP: $IP"
            az network public-ip delete -g ${{ github.event.inputs.resource_group }} -n "$IP" --no-wait
          done
          
          # Delete orphaned NSGs
          echo "Deleting orphaned network security groups..."
          NSGS=$(az network nsg list -g ${{ github.event.inputs.resource_group }} --query "[?subnets==null && networkInterfaces==null].name" -o tsv)
          for NSG in $NSGS; do
            echo "  Deleting NSG: $NSG"
            az network nsg delete -g ${{ github.event.inputs.resource_group }} -n "$NSG" --no-wait
          done
      
      - name: Final Status
        run: |
          echo ""
          echo "## Final Status Report"
          echo ""
          
          # Check remaining VMs
          REMAINING_VMS=$(az vm list -g ${{ github.event.inputs.resource_group }} --query "length([])" -o tsv)
          echo "Remaining VMs: $REMAINING_VMS"
          
          if [ "$REMAINING_VMS" -gt "0" ]; then
            echo "⚠️ Some VMs could not be deleted:"
            az vm list -g ${{ github.event.inputs.resource_group }} --query "[].name" -o tsv
          else
            echo "✅ All VMs successfully deleted"
          fi
          
          # Show quota status
          echo ""
          echo "## Quota Status"
          CURRENT=$(az vm list-usage -l eastus2 --query "[?name.value=='cores'].currentValue" -o tsv)
          LIMIT=$(az vm list-usage -l eastus2 --query "[?name.value=='cores'].limit" -o tsv)
          AVAILABLE=$((LIMIT - CURRENT))
          
          echo "Cores used: $CURRENT / $LIMIT"
          echo "Cores available: $AVAILABLE"
          
          # Summary
          echo ""
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Group: ${{ github.event.inputs.resource_group }}" >> $GITHUB_STEP_SUMMARY
          echo "- VMs deleted: Check above for count" >> $GITHUB_STEP_SUMMARY
          echo "- Current quota usage: $CURRENT / $LIMIT cores" >> $GITHUB_STEP_SUMMARY
          echo "- Available cores: $AVAILABLE" >> $GITHUB_STEP_SUMMARY