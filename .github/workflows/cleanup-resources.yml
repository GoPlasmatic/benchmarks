name: Cleanup Azure Resources

on:
  workflow_dispatch:
    inputs:
      delete_all:
        description: 'Delete ALL VMs in resource group'
        required: false
        type: boolean
        default: false
      older_than_hours:
        description: 'Delete VMs older than X hours'
        required: false
        default: '2'
  
  schedule:
    # Run cleanup daily at 3 AM UTC
    - cron: '0 3 * * *'

env:
  AZURE_RESOURCE_GROUP: 'rg-benchmarks'

jobs:
  cleanup:
    name: Cleanup Azure Resources
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: List Current Resources
        run: |
          echo "## Current Azure Resources" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List VMs
          echo "### Virtual Machines" >> $GITHUB_STEP_SUMMARY
          VMS=$(az vm list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "[].{name:name, size:hardwareProfile.vmSize, state:provisioningState, created:timeCreated}" -o table)
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$VMS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Show quota usage
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quota Usage" >> $GITHUB_STEP_SUMMARY
          QUOTA=$(az vm list-usage -l eastus2 --query "[?name.value=='cores'].{Current:currentValue, Limit:limit}" -o table)
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$QUOTA" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      
      - name: Delete Old VMs
        if: github.event.inputs.delete_all != 'true'
        run: |
          HOURS=${{ github.event.inputs.older_than_hours || '2' }}
          SECONDS=$((HOURS * 3600))
          
          echo "Deleting VMs older than $HOURS hours..."
          
          # Get list of VMs to delete
          CURRENT_TIME=$(date +%s)
          VMS_TO_DELETE=""
          
          # Get all benchmark VMs
          VMS=$(az vm list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "[?contains(name, 'vm-reframe-') || contains(name, 'vm-benchmark-')].{name:name, created:timeCreated}" -o json)
          
          # Parse and check age
          echo "$VMS" | jq -r '.[] | "\(.name) \(.created)"' | while read NAME CREATED; do
            if [ -n "$CREATED" ] && [ "$CREATED" != "null" ]; then
              CREATED_TIME=$(date -d "$CREATED" +%s 2>/dev/null || echo 0)
              AGE=$((CURRENT_TIME - CREATED_TIME))
              
              if [ $AGE -gt $SECONDS ]; then
                echo "Deleting $NAME (age: $((AGE/3600)) hours)"
                az vm delete -g ${{ env.AZURE_RESOURCE_GROUP }} -n "$NAME" --yes --no-wait || true
                echo "- Deleted VM: $NAME" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
      
      - name: Delete ALL VMs
        if: github.event.inputs.delete_all == 'true'
        run: |
          echo "⚠️ Deleting ALL VMs in resource group..."
          
          VMS=$(az vm list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "[].name" -o tsv)
          
          if [ -n "$VMS" ]; then
            echo "VMs to delete: $VMS"
            for VM in $VMS; do
              echo "Deleting $VM..."
              az vm delete -g ${{ env.AZURE_RESOURCE_GROUP }} -n "$VM" --yes --no-wait || true
              echo "- Deleted VM: $VM" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "No VMs to delete"
            echo "No VMs found to delete" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Clean Up Orphaned Resources
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Orphaned Resources Cleanup" >> $GITHUB_STEP_SUMMARY
          
          # Delete orphaned disks
          DISKS=$(az disk list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "[?managedBy==null].name" -o tsv)
          if [ -n "$DISKS" ]; then
            echo "Deleting orphaned disks..."
            for DISK in $DISKS; do
              az disk delete -g ${{ env.AZURE_RESOURCE_GROUP }} -n "$DISK" --yes --no-wait || true
              echo "- Deleted disk: $DISK" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Delete orphaned NICs
          NICS=$(az network nic list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "[?virtualMachine==null].name" -o tsv)
          if [ -n "$NICS" ]; then
            echo "Deleting orphaned NICs..."
            for NIC in $NICS; do
              az network nic delete -g ${{ env.AZURE_RESOURCE_GROUP }} -n "$NIC" --no-wait || true
              echo "- Deleted NIC: $NIC" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          # Delete orphaned public IPs
          IPS=$(az network public-ip list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "[?ipConfiguration==null].name" -o tsv)
          if [ -n "$IPS" ]; then
            echo "Deleting orphaned public IPs..."
            for IP in $IPS; do
              az network public-ip delete -g ${{ env.AZURE_RESOURCE_GROUP }} -n "$IP" --no-wait || true
              echo "- Deleted public IP: $IP" >> $GITHUB_STEP_SUMMARY
            done
          fi
      
      - name: Final Quota Check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Final Status" >> $GITHUB_STEP_SUMMARY
          
          # Wait a bit for deletions to process
          sleep 10
          
          # Show final quota
          CURRENT=$(az vm list-usage -l eastus2 --query "[?name.value=='cores'].currentValue" -o tsv)
          LIMIT=$(az vm list-usage -l eastus2 --query "[?name.value=='cores'].limit" -o tsv)
          
          echo "✅ Quota after cleanup: $CURRENT / $LIMIT cores used" >> $GITHUB_STEP_SUMMARY
          
          # List remaining VMs
          REMAINING=$(az vm list -g ${{ env.AZURE_RESOURCE_GROUP }} --query "length([])" -o tsv)
          echo "Remaining VMs: $REMAINING" >> $GITHUB_STEP_SUMMARY