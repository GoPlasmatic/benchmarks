#!/bin/bash

# Azure VM Performance Tuning Script
# Optimizes Azure VM for high-throughput benchmark workloads

set -e

VM_SIZE="${1:-8-core}"
MODE="${2:-benchmark}"  # benchmark or production

echo "========================================"
echo "Azure VM Performance Tuning"
echo "========================================"
echo "VM Size: $VM_SIZE"
echo "Mode: $MODE"
echo ""

# Function to detect Azure VM
is_azure_vm() {
    if [ -f /sys/class/dmi/id/sys_vendor ]; then
        vendor=$(cat /sys/class/dmi/id/sys_vendor)
        if [[ "$vendor" == *"Microsoft"* ]]; then
            return 0
        fi
    fi
    return 1
}

# Function to enable accelerated networking
enable_accelerated_networking() {
    echo "Checking accelerated networking status..."
    
    if lspci | grep -q "Mellanox"; then
        echo "✓ Accelerated networking is enabled"
        
        # Optimize Mellanox driver settings
        if [ -f /sys/class/net/eth0/device/sriov_numvfs ]; then
            echo "Optimizing SR-IOV settings..."
            echo 8 | sudo tee /sys/class/net/eth0/device/sriov_numvfs > /dev/null
        fi
    else
        echo "⚠ Accelerated networking not detected"
        echo "  Enable it via Azure Portal for better performance"
    fi
}

# Function to optimize kernel parameters
optimize_kernel() {
    echo "Optimizing kernel parameters..."
    
    # Create sysctl configuration
    cat <<EOF | sudo tee /etc/sysctl.d/99-azure-benchmark.conf > /dev/null
# Azure VM Optimization for Benchmarks
# Generated by tune_azure_vm.sh

# File Descriptors
fs.file-max = 2097152
fs.nr_open = 2097152

# Network Core
net.core.somaxconn = 65535
net.core.netdev_max_backlog = 65535
net.core.netdev_budget = 600
net.core.netdev_budget_usecs = 8000
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.core.rmem_max = 134217728
net.core.wmem_max = 134217728
net.core.optmem_max = 65536

# TCP Settings
net.ipv4.tcp_max_syn_backlog = 65535
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_rmem = 4096 262144 134217728
net.ipv4.tcp_wmem = 4096 262144 134217728
net.ipv4.tcp_mem = 786432 1048576 26777216
net.ipv4.ip_local_port_range = 1024 65535

# Connection Tracking
net.netfilter.nf_conntrack_max = 1000000
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 30

# Virtual Memory
vm.swappiness = 10
vm.dirty_ratio = 15
vm.dirty_background_ratio = 5

# Disable IPv6 if not needed
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
EOF
    
    # Apply settings
    sudo sysctl -p /etc/sysctl.d/99-azure-benchmark.conf
    
    echo "✓ Kernel parameters optimized"
}

# Function to optimize CPU settings
optimize_cpu() {
    echo "Optimizing CPU settings..."
    
    # Set CPU governor to performance
    if command -v cpupower &> /dev/null; then
        sudo cpupower frequency-set -g performance
        echo "✓ CPU governor set to performance"
    else
        echo "Installing cpupower tools..."
        sudo apt-get update && sudo apt-get install -y linux-tools-common linux-tools-generic
        sudo cpupower frequency-set -g performance 2>/dev/null || echo "⚠ Could not set CPU governor"
    fi
    
    # Disable CPU frequency scaling
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
        echo performance | sudo tee $cpu > /dev/null 2>&1 || true
    done
    
    # Set CPU affinity for network interrupts
    if [ -f /proc/irq/default_smp_affinity ]; then
        # Use all CPUs for interrupts
        echo ffffff | sudo tee /proc/irq/default_smp_affinity > /dev/null
    fi
    
    echo "✓ CPU settings optimized"
}

# Function to optimize disk I/O
optimize_disk() {
    echo "Optimizing disk I/O settings..."
    
    # Find the main disk device
    DISK=$(lsblk -d -o NAME,TYPE | grep disk | head -1 | awk '{print $1}')
    
    if [ -n "$DISK" ]; then
        # Set scheduler to noop for SSDs (common in Azure)
        echo noop | sudo tee /sys/block/$DISK/queue/scheduler > /dev/null 2>&1 || \
        echo none | sudo tee /sys/block/$DISK/queue/scheduler > /dev/null 2>&1 || true
        
        # Increase read-ahead
        echo 4096 | sudo tee /sys/block/$DISK/queue/read_ahead_kb > /dev/null
        
        # Optimize queue depth
        echo 256 | sudo tee /sys/block/$DISK/queue/nr_requests > /dev/null
        
        echo "✓ Disk I/O optimized for $DISK"
    else
        echo "⚠ Could not detect disk device"
    fi
}

# Function to set ulimits
set_ulimits() {
    echo "Setting system limits..."
    
    # Create limits configuration
    cat <<EOF | sudo tee /etc/security/limits.d/99-benchmark.conf > /dev/null
# Limits for benchmark workloads
* soft nofile 1048576
* hard nofile 1048576
* soft nproc 32768
* hard nproc 32768
* soft memlock unlimited
* hard memlock unlimited
EOF
    
    # Set for current session
    ulimit -n 1048576
    ulimit -u 32768
    
    echo "✓ System limits configured"
}

# Function to optimize network interfaces
optimize_network_interfaces() {
    echo "Optimizing network interfaces..."
    
    # Get primary network interface
    IFACE=$(ip route | grep default | awk '{print $5}' | head -1)
    
    if [ -n "$IFACE" ]; then
        # Enable TSO/GSO/GRO
        sudo ethtool -K $IFACE tso on gso on gro on 2>/dev/null || true
        
        # Increase ring buffer sizes
        sudo ethtool -G $IFACE rx 4096 tx 4096 2>/dev/null || true
        
        # Set interrupt coalescing
        sudo ethtool -C $IFACE adaptive-rx on adaptive-tx on 2>/dev/null || true
        
        # Increase MTU if possible (jumbo frames)
        if [[ "$MODE" == "benchmark" ]]; then
            sudo ip link set dev $IFACE mtu 9000 2>/dev/null || \
            sudo ip link set dev $IFACE mtu 1500 2>/dev/null || true
        fi
        
        echo "✓ Network interface $IFACE optimized"
    else
        echo "⚠ Could not detect network interface"
    fi
}

# Function to install monitoring tools
install_monitoring() {
    echo "Installing monitoring tools..."
    
    # Check if already installed
    if ! command -v htop &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y htop iotop nethogs iftop sysstat
    fi
    
    # Enable sysstat
    sudo systemctl enable sysstat
    sudo systemctl start sysstat
    
    echo "✓ Monitoring tools installed"
}

# Function to create tuning report
create_report() {
    echo ""
    echo "========================================"
    echo "Tuning Report"
    echo "========================================"
    
    # CPU info
    echo "CPU Information:"
    lscpu | grep -E "Model name|CPU\(s\)|Thread|Core|Socket"
    
    # Memory info
    echo ""
    echo "Memory Information:"
    free -h
    
    # Network info
    echo ""
    echo "Network Configuration:"
    ip link show | grep -E "^[0-9]+:|mtu"
    
    # Disk info
    echo ""
    echo "Disk Configuration:"
    lsblk -d -o NAME,SIZE,TYPE,MOUNTPOINT
    
    # Current limits
    echo ""
    echo "Current Limits:"
    ulimit -a | head -5
    
    # Key sysctl values
    echo ""
    echo "Key Kernel Parameters:"
    sysctl net.core.somaxconn net.ipv4.tcp_max_syn_backlog fs.file-max
}

# Main execution
main() {
    # Check if running on Azure
    if is_azure_vm; then
        echo "✓ Running on Azure VM"
    else
        echo "⚠ Not running on Azure VM, some optimizations may not apply"
    fi
    
    # Run optimizations
    optimize_kernel
    optimize_cpu
    optimize_disk
    optimize_network_interfaces
    set_ulimits
    
    # Azure-specific optimizations
    if is_azure_vm; then
        enable_accelerated_networking
    fi
    
    # Install monitoring tools if requested
    if [[ "$MODE" == "benchmark" ]]; then
        install_monitoring
    fi
    
    # Generate report
    create_report
    
    echo ""
    echo "========================================"
    echo "✅ VM Tuning Complete!"
    echo "========================================"
    echo ""
    echo "Next steps:"
    echo "1. Reboot the VM to ensure all settings take effect"
    echo "2. Run the benchmark: python3 run_benchmark.py --vm-size $VM_SIZE"
    echo "3. Monitor performance with: htop, iotop, iftop"
    echo ""
    echo "To verify settings:"
    echo "  sysctl -a | grep -E 'somaxconn|file-max|tcp_'"
    echo "  ulimit -a"
    echo "  ethtool -k eth0"
}

# Run main function
main